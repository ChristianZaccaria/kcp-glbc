
module "cluster-1" {
  version = "1.11.4" 
  source = "scholzj/minikube/aws"
  aws_region          = var.aws_region
  cluster_name        = "cluster-1"
  aws_instance_type   = "c5.large"
  ssh_public_key      = var.ssh_public_key
  aws_subnet_id       = module.vpc.public_subnets[0]
  hosted_zone         = var.hosted_zone
  hosted_zone_private = true
  ami_image_id        = var.ami_image_id
  tags                = var.tags
  addons              = []
}

module "cluster-2" {
  version = "1.11.4" 
  source = "scholzj/minikube/aws"
  aws_region          = var.aws_region
  cluster_name        = "cluster-2"
  aws_instance_type   = "c5.large"
  ssh_public_key      = var.ssh_public_key
  aws_subnet_id       = module.vpc.public_subnets[1]
  hosted_zone         = var.hosted_zone 
  hosted_zone_private = true
  ami_image_id        = var.ami_image_id
  tags                = var.tags
  addons              = []
}

#####
##  VARIABLES
#####

variable "tags" {
  description = "Tags used for the AWS resources created by this template"
  type        = map(string)
  default     = { environment = "kcp-poc" }
}

variable "ssh_public_key" {
  description = "Path to the pulic part of SSH key which should be used for the instance"
  default     = "~/.ssh/id_rsa.pub"
}

variable "hosted_zone" {
  description = "Hosted zone to be used for the alias"
  default = "example.com"
}

variable "hosted_zone_private" {
  description = "Is the hosted zone public or private"
  default     = true
}

variable "ami_image_id" {
  description = "ID of the AMI image which should be used. If empty, the latest CentOS 7 image will be used. See README.md for AMI image requirements."
  default     = ""
}



#####
##  OUTPUTS
#####

output "cluster-1_ip" {
  description = "IP address of the Minikube"
  value       = module.cluster-1.public_ip
}

output "cluster-2_ip" {
  description = "IP address of the Minikube"
  value       = module.cluster-2.public_ip
}

output "copy_cluster-1_config_ip" {
  description = "Command for copying the kubeconfig for connecting using IP address"
  value       = "To copy the kubectl config file using IP address, run: 'scp ${module.cluster-1.ssh_user}@${module.cluster-1.public_ip}:${module.cluster-1.kubeconfig_ip} cluster1_kubeconfig'"
}
output "copy_cluster-2_config_ip" {
  description = "Command for copying the kubeconfig for connecting using IP address"
  value       = "To copy the kubectl config file using IP address, run: 'scp ${module.cluster-2.ssh_user}@${module.cluster-2.public_ip}:${module.cluster-2.kubeconfig_ip} cluster2_kubeconfig'"
}
